#!/usr/bin/env python3

from socket import *
import asyncio 

import database 
import env 
import cluster 



async def write_message(writer: asyncio.StreamWriter, message: str):
    writer.write(message)
    await writer.drain() 



async def handle_client(reader: asyncio.StreamReader, writer: asyncio.StreamWriter):

    addr = writer.get_extra_info('peername')
    print(f"Client {addr} joined")


    try:
        while True: 
            
            command = await reader.read(1024)
            command = command.decode()
            comlist = command.split()


            if comlist[0] == 'LIST':
                message = stores.list().encode()


            elif comlist[0] == 'SELECT':
                message = stores.select(comlist[1]).encode()           

            elif comlist[0] == 'CREATE':
                message = stores.create(comlist[1]).encode()

            elif comlist[0] == 'DROP':
                message = stores.drop(comlist[1]).encode()

            else:
                if stores.current == None:
                    message = "ERROR. No database selected".encode()
                else:
                    stores.current.wal.write(command)


            if comlist[0] == 'GET':
                message = stores.current.get(comlist[1]).encode()

            elif comlist[0] == 'SET':
                message = stores.current.set(comlist[1], comlist[2]).encode()

            elif comlist[0] == 'DELETE':
                message = stores.current.delete(comlist[1]).encode()

            else:   
                break 

            await write_message(writer, message)


    except BrokenPipeError:
        print(f"Client {addr} closed the connection")


    finally:
        writer.close()
        await writer.wait_closed()


async def main():
    server = await asyncio.start_server(handle_client, env.HOST, env.PORT)
    print("Server is listening")
    async with server:
        await server.serve_forever()


                
 


if __name__ == '__main__':
    stores = cluster.Cluster()
    asyncio.run(main())