#!/usr/bin/env python3

from socket import *
import asyncio 

import database 
import env 


async def handle_client(reader: asyncio.StreamReader, writer: asyncio.StreamWriter):
    addr = writer.get_extra_info('peername')
    print(f"Client {addr} joined")
    try:
        while True: 
            command = await reader.read(1024)
            command = command.decode()
            comlist = command.split()
            if comlist[0] == 'GET':
                send_msg = store.get(comlist[1]).encode()
                print('sending a new message ', send_msg)
                writer.write(send_msg)
                await writer.drain()
            elif comlist[0] == 'SET':
                send_msg = store.set(comlist[1], comlist[2]).encode()
                print('sending message')
                writer.write(send_msg)
                await writer.drain()
            elif comlist[0] == 'DELETE':
                send_msg = store.delete(comlist[1]).encode()
                writer.write(send_msg)
                await writer.drain()
            else:   
                break 
    except BrokenPipeError:
        print(f"Client {addr} closed the connection")
    finally:
        writer.close()
        await writer.wait_closed()


async def main():
    server = await asyncio.start_server(handle_client, env.HOST, env.PORT)
    print("Server is listening")
    async with server:
        await server.serve_forever()


                
 


if __name__ == '__main__':
    store = database.Database()
    asyncio.run(main())